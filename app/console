#!/usr/bin/env /usr/local/bin/php
<?php

declare(strict_types=1);

namespace
{
    use App\Compat;
    use App\Context;
    use Domain\Error;
    
    use function Input\infer;
    use function Output\panic;
    use function Output\stream;
    use function Service\path;
    
    defined('APP_PATH') ?: define('APP_PATH', dirname(__FILE__));
    
    (fn(string $service, ...$request) => (new class($service) extends Context {
        use Compat;
        
        private $service;
        
        public function __construct(string $service) {
            $this->service = $service;
        }
        
        public function respond(...$request): void {
            echo stream((function (...$payload) {
                try {
                    return $this->compute($this->service, ...infer(...$payload));
                } catch (\Exception $error) {
                    panic('Error!', $payload, $error);
                }
            })(...$request));
            
            exit;
        }
    })->respond(...$request))($argv[1], ...array_slice($argv, 2));
}

namespace App
{
    use Domain\Error;
    
    use function Output\panic;
    use function Service\path;
    
    trait Compat
    {
        protected function module(string $name): callable {
            if (file_exists($path = path($name))) {
                return require $path;
            }
            
            panic('Module %s not found at %s!', [$name, $path]);
        }
    }
    
    abstract class Context
    {
        abstract protected function module(string $name): callable;
        
        public function service(string $name): callable
        {
            return $this->module($name);
        }
        
        public function compute(string $delegate, ...$arguments)
        {
            return $this->service($delegate)(...$arguments);
        }
        
        public function defer(string $delegate, ...$default): callable
        {
            return function(...$arguments) use($delegate, $default) {
                return $this->compute($delegate, ...count($arguments) ? $arguments : $default);
            };
        }
    }
}

namespace Domain
{
    class Error extends \DomainException
    {
        public function __construct(string $message, string ...$errors)
        {
            parent::__construct(sprintf($message, ...$errors));
        }
    }
}

namespace Format
{
    function pascal(string $input): string {
        return str_replace(' ', '', words($input));
    }
    
    function camel(string $name): string {
        return lcfirst(pascal($name));
    }
    
    function sausage(string $input): string {
        return str_replace('_', '-', snake($input));
    }
    
    function words(string $input): string {
        return ucwords(str_replace('_', ' ', snake($input)));
    }
    
    function snake(string $input): string {
        return strtolower(preg_replace('/[^_a-z0-9]|_{2,}/i', '_', $input));
    }
}

namespace Service
{
    function path(string $name): string {
        return sprintf('%s/%s.php', APP_PATH, format('format\sausage', $name));
    }
    
    function name(string $path): string {
        return format('format\sausage', str_replace([APP_PATH, '.php'], '', $path));
    }
    
    function ns(string $path, int $offset = 0): string {
        return trim(str_replace('/', '\\',
            dirname(format('format\pascal', sprintf('App\/\%s', $path)), $offset)
        ), '\\');
    }
    
    function format(string $method, string $path): string {
        return implode('/', array_map(fn($part) => $method($part), explode('/', $path)));
    }
}

namespace Input
{
    function infer(...$arguments): array {
        foreach ($arguments as &$argument) {
            if (is_string($argument)) {
                $decoded = json_decode($argument);
    
                if (!json_last_error()) {
                    $argument = $decoded;
                }
            }
        }
        
        return $arguments;
    }
}

namespace Output
{
    function stream($output): string {
        return (json($output) ?? '').PHP_EOL;
    }
    
    function json($output): ?string {
        $input = stripslashes(json_encode($output, JSON_PRETTY_PRINT) ?: null);
    
        if ($input
            && strpos($input, '"') === 0
            && strrpos($input, '"') + 1 === strlen($input)) {
            $input = substr($input, 1, -1);
        }
        
        return $input;
    }
    
    function panic(string $message, array $notes = [], ?\Exception $exception = null): void {
        echo stream(sprintf($message, ...$notes));
        
        if ($exception) {
            echo stream((object) [
                'code' => $exception->getCode() ?: 503,
                'message' => $exception->getMessage(),
                'file' => $exception->getFile(),
                'line' => $exception->getLine(),
                'trace' => explode(PHP_EOL, $exception->getTraceAsString()),
            ]);
        }
        
        exit(1);
    }
}
